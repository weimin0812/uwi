class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ret = new ArrayList<>();
        if (n <= 0) {
            return ret;
        }
        backtrack(ret, 0, 0, n, new StringBuilder());
        return ret;
    }

    private void backtrack(List<String> ret, int open, int close, int n, StringBuilder sb) {
        if (open == n && close == n) {
            ret.add(sb.toString());
            return;
        }

        if (open < n) {
            sb.append('(');
            backtrack(ret, open + 1, close, n, sb);
            sb.deleteCharAt(sb.length() - 1);
        }

        if (close < open) {
            sb.append(')');
            backtrack(ret, open, close + 1, n, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
//runtime:1 ms
//memory:37.9 MB
