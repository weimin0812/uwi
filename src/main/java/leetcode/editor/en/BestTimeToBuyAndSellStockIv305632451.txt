    class Solution {
        public int maxProfit(int k, int[] prices) {
            if (prices == null || prices.length == 0 || k <= 0) {
                return 0;
            }
            int n = prices.length;
            if (k > n / 2) {
                return maxProfit(prices);
            }
            int[][][] dp = new int[n][k + 1][2];
            for (int i = 0; i < n; i++) {
                for (int j = 1; j <= k; j++) {
                    dp[i][j][0] = Math.max(i - 1 >= 0 ? dp[i - 1][j][0] : 0, (i - 1 >= 0 ? dp[i - 1][j][1] : Integer.MIN_VALUE) + prices[i]);
                    dp[i][j][1] = Math.max(i - 1 >= 0 ? dp[i - 1][j][1] : Integer.MIN_VALUE, (i - 1 >= 0? dp[i - 1][j - 1][0] : 0) - prices[i]);
                }
            }
            for (int i = 0; i < dp.length; i++) {
                for (int j = 1; j <= k; j++) {
                    dp[i][j][0] = Math.max(i - 1 >= 0 ? dp[i - 1][j][0] : 0, (i - 1 >= 0 ? dp[i - 1][j][1] : Integer.MIN_VALUE) + prices[i]);
                    dp[i][j][1] = Math.max(i - 1 >= 0 ? dp[i - 1][j][1] : Integer.MIN_VALUE, ((i - 1 >= 0 && j > 1) ? dp[i - 1][j - 1][0] : 0) - prices[i]);
                }
            }
            return dp[n - 1][k][0];
        }

        private int maxProfit(int[] prices) {
            int n = prices.length;
            int[][] dp = new int[n][2];
            for (int i = 0; i < n; i++) {
                dp[i][0] = Math.max(i - 1 >= 0 ? dp[i - 1][0] : 0, (i - 1 >= 0 ? dp[i - 1][1] : Integer.MIN_VALUE) + prices[i]);
                dp[i][1] = Math.max(i - 1 >= 0 ? dp[i - 1][1] : Integer.MIN_VALUE, (i - 1 >= 0 ? dp[i - 1][0] : 0) - prices[i]);
            }
            return dp[n - 1][0];
        }
    }

//total_testcases:211
//total_correct:181
//input_formatted:2, [3,3,5,0,0,3,1,4]
//expected_output:6
//code_output:2
