    class Solution {
        public List<List<Integer>> permute(int[] nums) {
            List<List<Integer>> ret = new ArrayList<>();
            boolean[] visited = new boolean[nums.length];
            dfs(nums, ret, new ArrayList<Integer>(), 0, visited);
            return ret;
        }

        private void dfs(int[] nums, List<List<Integer>> ret, ArrayList<Integer> list, int index, boolean[] visited) {
            if (index >= nums.length) {
                ret.add(new ArrayList<>(list));
                return;
            }
            for (int i = 0; i < nums.length; i++) {
                if (visited[i]) {
                    continue;
                }
                visited[i] = true;
                list.add(nums[i]);
                dfs(nums, ret, list, index + 1, visited);
                visited[i] = false;
                list.remove(list.size() - 1);
            }
        }
    }

//runtime:1 ms
//memory:41.2 MB
