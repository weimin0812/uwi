class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ret = new ArrayList<>();
        if (n <= 0) {
            return ret;
        }

        dfs(0, 2 * n, ret, new StringBuilder());
        return ret;
    }

    private void dfs(int i, int n, List<String> ret, StringBuilder sb) {
        if (i == n) {
            if (isValid(sb.toString())) {
                ret.add(sb.toString());
            }
            return;
        }

        char[] chars = "()".toCharArray();
        for (int j = 0; j < chars.length; j++) {
            char c = chars[j];
            sb.append(c);
            dfs(i + 1, n, ret, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
    }

    private boolean isValid(String s) {
        if (s == null || s.isEmpty()) {
            return false;
        }

        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                stack.push(')');
            } else {
                if (stack.isEmpty() || !stack.pop().equals(')')) {
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }
}
//runtime:10 ms
//memory:39.1 MB
