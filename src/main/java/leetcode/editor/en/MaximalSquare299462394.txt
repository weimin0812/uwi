    class Solution {
        public int maximalSquare(char[][] matrix) {
            // if matrix[i][j] == 1
            //dp[i][j] = Math.min(dp[i-1,j],dp[i,j-1],dp[i-1][j-1])+1
            if (matrix == null || matrix.length == 0) {
                return 0;
            }
            int[][] dp = new int[matrix.length][matrix[0].length];
            int ret = 0;
            for (int i = 0; i < dp.length; i++) {
                for (int j = 0; j < dp[i].length; j++) {
                    if (matrix[i][j] == '1') {
                        if (i == 0 || j == 0) {
                            dp[i][j] = 1;
                        } else {
                            dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i - 1][j - 1]), dp[i][j - 1]) + 1;
                        }
                    }
                    ret = Math.max(ret, dp[i][j]);
                }
            }
            return ret * ret;
        }
    }

//runtime:11 ms
//memory:48.4 MB
