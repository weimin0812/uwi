public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ret = new int[2];
        ret[0] = first(nums, target);
        ret[1] = last(nums, target);
        return ret;
        
    }
    
    private int first(int[] nums, int target){
        int l = 0;
        int h = nums.length-1;
        int m = 0;
        while(l <= h){
            m = l + (h-l)/2;
            if(nums[m] == target){
                if(m == 0 || nums[m-1] != target){
                   return m;
                }else{
                    h--;
                }
            }else if(target < nums[m]){
                h = m-1;
            }else{
                l = m+1;
            }
        }
        return -1;
    }
    
    private int last(int[] nums, int target){
        int l = 0;
        int h = nums.length-1;
        int m = 0;
        while(l <= h){
            m = l + (h-l)/2;
            if(nums[m] == target){
                if(m == nums.length-1 || nums[m+1] != target){
                   return m;
                }else{
                    l++;
                }
            }else if(target < nums[m]){
                h = m-1;
            }else{
                l = m+1;
            }
        }
        return -1;
    }
}
//runtime:8 ms
//memory:N/A
